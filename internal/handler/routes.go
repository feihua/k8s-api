// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	configmap "k8s_test/internal/handler/configmap"
	deployment "k8s_test/internal/handler/deployment"
	ingress "k8s_test/internal/handler/ingress"
	namespace "k8s_test/internal/handler/namespace"
	nodes "k8s_test/internal/handler/nodes"
	pods "k8s_test/internal/handler/pods"
	secret "k8s_test/internal/handler/secret"
	serve "k8s_test/internal/handler/serve"
	statefulset "k8s_test/internal/handler/statefulset"
	sysdept "k8s_test/internal/handler/sys/dept"
	sysdict "k8s_test/internal/handler/sys/dict"
	sysjob "k8s_test/internal/handler/sys/job"
	syslog "k8s_test/internal/handler/sys/log"
	sysmenu "k8s_test/internal/handler/sys/menu"
	sysrole "k8s_test/internal/handler/sys/role"
	sysuser "k8s_test/internal/handler/sys/user"
	"k8s_test/internal/svc"

	"github.com/tal-tech/go-zero/rest"
)

func RegisterHandlers(engine *rest.Server, serverCtx *svc.ServiceContext) {
	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/deployment/create",
				Handler: deployment.DeploymentCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/deployment/update",
				Handler: deployment.DeploymentUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/deployment/updateStatus",
				Handler: deployment.DeploymentUpdateStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/deployment/delete",
				Handler: deployment.DeploymentDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/deployment/deleteCollection",
				Handler: deployment.DeploymentDeleteCollectionHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/deployment/get",
				Handler: deployment.DeploymentGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/deployment/list",
				Handler: deployment.DeploymentListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/deployment/getScale",
				Handler: deployment.DeploymentGetScaleHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/deployment/updateScale",
				Handler: deployment.DeploymentUpdateScaleHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/ingress/create",
				Handler: ingress.IngressCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/ingress/update",
				Handler: ingress.IngressUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/ingress/updateStatus",
				Handler: ingress.IngressUpdateStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/ingress/delete",
				Handler: ingress.IngressDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/ingress/get",
				Handler: ingress.IngressGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/ingress/list",
				Handler: ingress.IngressListHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/namespace/create",
				Handler: namespace.NamespaceCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/namespace/delete",
				Handler: namespace.NamespaceDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/namespace/get",
				Handler: namespace.NamespaceGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/namespace/list",
				Handler: namespace.NamespaceListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/namespace/listWith",
				Handler: namespace.NamespaceListWithHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/service/create",
				Handler: serve.ServiceCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/service/update",
				Handler: serve.ServiceUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/service/updateStatus",
				Handler: serve.ServiceUpdateStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/service/delete",
				Handler: serve.ServiceDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/service/get",
				Handler: serve.ServiceGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/service/list",
				Handler: serve.ServiceListHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/pods/create",
				Handler: pods.PodCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/pods/update",
				Handler: pods.PodUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/pods/updateStatus",
				Handler: pods.PodUpdateStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/pods/delete",
				Handler: pods.PodDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/pods/deleteCollection",
				Handler: pods.PodDeleteCollectionHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/pods/get",
				Handler: pods.PodGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/pods/list",
				Handler: pods.PodListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/pods/getEphemeralContainers",
				Handler: pods.PodGetEphemeralContainersHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/pods/updateEphemeralContainers",
				Handler: pods.PodUpdateEphemeralContainersHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/nodes/get",
				Handler: nodes.NodeGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/nodes/list",
				Handler: nodes.NodeListHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/statefulset/create",
				Handler: statefulset.StatefulSetCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/statefulset/update",
				Handler: statefulset.StatefulSetUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/statefulset/updateStatus",
				Handler: statefulset.StatefulSetUpdateStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/statefulset/delete",
				Handler: statefulset.StatefulSetDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/statefulset/get",
				Handler: statefulset.StatefulSetGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/statefulset/list",
				Handler: statefulset.StatefulSetListHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/secret/create",
				Handler: secret.SecretCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/secret/update",
				Handler: secret.SecretUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/secret/updateStatus",
				Handler: secret.SecretUpdateStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/secret/delete",
				Handler: secret.SecretDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/secret/get",
				Handler: secret.SecretGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/secret/list",
				Handler: secret.SecretListHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/configMap/create",
				Handler: configmap.ConfigMapCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/configMap/update",
				Handler: configmap.ConfigMapUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/configMap/updateStatus",
				Handler: configmap.ConfigMapUpdateStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/configMap/delete",
				Handler: configmap.ConfigMapDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/configMap/get",
				Handler: configmap.ConfigMapGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/configMap/list",
				Handler: configmap.ConfigMapListHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/api/sys/user/currentUser",
				Handler: sysuser.UserInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/user/add",
				Handler: sysuser.UserAddHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/user/list",
				Handler: sysuser.UserListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/user/update",
				Handler: sysuser.UserUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/user/delete",
				Handler: sysuser.UserDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/user/reSetPassword",
				Handler: sysuser.ReSetPasswordHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/user/UpdateUserStatus",
				Handler: sysuser.UpdateUserStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/user/selectAllData",
				Handler: sysuser.SelectAllDataHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/user/login",
				Handler: sysuser.UserLoginHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/role/add",
				Handler: sysrole.RoleAddHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/role/getAllRoleList",
				Handler: sysrole.RoleListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/role/update",
				Handler: sysrole.RoleUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/role/delete",
				Handler: sysrole.RoleDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/role/roleMenuIds",
				Handler: sysrole.RoleMenuIdsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/role/queryMenuByRoleId",
				Handler: sysrole.QueryMenuByRoleIdHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/role/updateRoleMenu",
				Handler: sysrole.UpdateRoleMenuHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/menu/add",
				Handler: sysmenu.MenuAddHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/menu/list",
				Handler: sysmenu.MenuListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/menu/update",
				Handler: sysmenu.MenuUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/menu/delete",
				Handler: sysmenu.MenuDeleteHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/dict/add",
				Handler: sysdict.DictAddHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/dict/list",
				Handler: sysdict.DictListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/dict/update",
				Handler: sysdict.DictUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/dict/delete",
				Handler: sysdict.DictDeleteHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/dept/add",
				Handler: sysdept.DeptAddHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/dept/list",
				Handler: sysdept.DeptListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/dept/update",
				Handler: sysdept.DeptUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/dept/delete",
				Handler: sysdept.DeptDeleteHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/job/add",
				Handler: sysjob.JobAddHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/job/list",
				Handler: sysjob.JobListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/job/update",
				Handler: sysjob.JobUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/job/delete",
				Handler: sysjob.JobDeleteHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/loginLog/list",
				Handler: syslog.LoginLogListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/loginLog/delete",
				Handler: syslog.LoginLogDeleteHandler(serverCtx),
			},
		},
	)
}

// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	deployment "k8s_test/internal/handler/deployment"
	ingress "k8s_test/internal/handler/ingress"
	namespace "k8s_test/internal/handler/namespace"
	nodes "k8s_test/internal/handler/nodes"
	pods "k8s_test/internal/handler/pods"
	serve "k8s_test/internal/handler/serve"
	"k8s_test/internal/svc"

	"github.com/tal-tech/go-zero/rest"
)

func RegisterHandlers(engine *rest.Server, serverCtx *svc.ServiceContext) {
	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/deployment/list",
				Handler: deployment.DeploymentListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/deployment/add",
				Handler: deployment.DeploymentAddHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/deployment/update",
				Handler: deployment.DeploymentUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/deployment/delete",
				Handler: deployment.DeploymentDeleteHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/ingress/list",
				Handler: ingress.IngressListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/ingress/add",
				Handler: ingress.IngressAddHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/ingress/delete",
				Handler: ingress.IngressDeleteHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/namespace/list",
				Handler: namespace.NamespaceListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/namespace/create",
				Handler: namespace.NamespaceAddHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/namespace/delete",
				Handler: namespace.NamespaceDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/namespace/get",
				Handler: namespace.GetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/namespace/watch",
				Handler: namespace.WatchHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/namespace/patch",
				Handler: namespace.PatchHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/service/list",
				Handler: serve.ServiceListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/service/add",
				Handler: serve.ServiceAddHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/service/delete",
				Handler: serve.ServiceDeleteHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/pods/list",
				Handler: pods.PodsListHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/nodes/list",
				Handler: nodes.NodesListHandler(serverCtx),
			},
		},
	)
}

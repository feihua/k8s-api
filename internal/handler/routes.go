// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	deployment "k8s_test/internal/handler/deployment"
	ingress "k8s_test/internal/handler/ingress"
	namespace "k8s_test/internal/handler/namespace"
	nodes "k8s_test/internal/handler/nodes"
	pods "k8s_test/internal/handler/pods"
	secret "k8s_test/internal/handler/secret"
	serve "k8s_test/internal/handler/serve"
	statefulset "k8s_test/internal/handler/statefulset"
	"k8s_test/internal/svc"

	"github.com/tal-tech/go-zero/rest"
)

func RegisterHandlers(engine *rest.Server, serverCtx *svc.ServiceContext) {
	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/deployment/create",
				Handler: deployment.DeploymentCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/deployment/update",
				Handler: deployment.DeploymentUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/deployment/updateStatus",
				Handler: deployment.DeploymentUpdateStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/deployment/delete",
				Handler: deployment.DeploymentDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/deployment/deleteCollection",
				Handler: deployment.DeploymentDeleteCollectionHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/deployment/get",
				Handler: deployment.DeploymentGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/deployment/list",
				Handler: deployment.DeploymentListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/deployment/watch",
				Handler: deployment.DeploymentWatchHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/deployment/patch",
				Handler: deployment.DeploymentPatchHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/deployment/getScale",
				Handler: deployment.DeploymentGetScaleHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/deployment/updateScale",
				Handler: deployment.DeploymentUpdateScaleHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/ingress/create",
				Handler: ingress.IngressCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/ingress/update",
				Handler: ingress.IngressUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/ingress/updateStatus",
				Handler: ingress.IngressUpdateStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/ingress/delete",
				Handler: ingress.IngressDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/ingress/get",
				Handler: ingress.IngressGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/ingress/list",
				Handler: ingress.IngressListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/ingress/watch",
				Handler: ingress.IngressWatchHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/ingress/patch",
				Handler: ingress.IngressPatchHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/namespace/create",
				Handler: namespace.NamespaceCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/namespace/update",
				Handler: namespace.NamespaceUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/namespace/updateStatus",
				Handler: namespace.NamespaceUpdateStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/namespace/delete",
				Handler: namespace.NamespaceDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/namespace/get",
				Handler: namespace.NamespaceGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/namespace/list",
				Handler: namespace.NamespaceListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/namespace/watch",
				Handler: namespace.NamespaceWatchHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/namespace/patch",
				Handler: namespace.NamespacePatchHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/service/create",
				Handler: serve.ServiceCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/service/update",
				Handler: serve.ServiceUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/service/updateStatus",
				Handler: serve.ServiceUpdateStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/service/delete",
				Handler: serve.ServiceDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/service/get",
				Handler: serve.ServiceGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/service/list",
				Handler: serve.ServiceListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/service/watch",
				Handler: serve.ServiceWatchHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/service/patch",
				Handler: serve.ServicePatchHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/pods/create",
				Handler: pods.PodCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/pods/update",
				Handler: pods.PodUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/pods/updateStatus",
				Handler: pods.PodUpdateStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/pods/delete",
				Handler: pods.PodDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/pods/deleteCollection",
				Handler: pods.PodDeleteCollectionHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/pods/get",
				Handler: pods.PodGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/pods/list",
				Handler: pods.PodListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/pods/watch",
				Handler: pods.PodWatchHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/pods/patch",
				Handler: pods.PodPatchHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/pods/getEphemeralContainers",
				Handler: pods.PodGetEphemeralContainersHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/pods/updateEphemeralContainers",
				Handler: pods.PodUpdateEphemeralContainersHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/nodes/create",
				Handler: nodes.NodeCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/nodes/update",
				Handler: nodes.NodeUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/nodes/updateStatus",
				Handler: nodes.NodeUpdateStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/nodes/delete",
				Handler: nodes.NodeDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/nodes/deleteCollection",
				Handler: nodes.NodeDeleteCollectionHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/nodes/get",
				Handler: nodes.NodeGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/nodes/list",
				Handler: nodes.NodeListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/nodes/watch",
				Handler: nodes.NodeWatchHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/nodes/patch",
				Handler: nodes.NodePatchHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/statefulset/create",
				Handler: statefulset.StatefulSetCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/statefulset/update",
				Handler: statefulset.StatefulSetUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/statefulset/updateStatus",
				Handler: statefulset.StatefulSetUpdateStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/statefulset/delete",
				Handler: statefulset.StatefulSetDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/statefulset/get",
				Handler: statefulset.StatefulSetGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/statefulset/list",
				Handler: statefulset.StatefulSetListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/statefulset/watch",
				Handler: statefulset.StatefulSetWatchHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/statefulset/patch",
				Handler: statefulset.StatefulSetPatchHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/secret/create",
				Handler: secret.SecretCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/secret/update",
				Handler: secret.SecretUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/secret/updateStatus",
				Handler: secret.SecretUpdateStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/secret/delete",
				Handler: secret.SecretDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/secret/get",
				Handler: secret.SecretGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/secret/list",
				Handler: secret.SecretListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/secret/watch",
				Handler: secret.SecretWatchHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/secret/patch",
				Handler: secret.SecretPatchHandler(serverCtx),
			},
		},
	)
}
